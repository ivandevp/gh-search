{"version":3,"sources":["components/SearchForm.module.css","components/RepoIssues.module.css","components/RepositoriesList.module.css","App.module.css","components/SearchIcon.js","components/SearchForm.js","components/RepositoryCard.js","components/RepositoriesList.js","components/RepoIssue.js","components/RepoIssues.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","searchForm","searchInputContainer","searchInput","searchIcon","searchCriteria","searchButton","dialog","dialogContent","close","repoList","repo","controls","container","title","SearchIcon","props","react_default","a","createElement","Object","assign","aria-hidden","data-prefix","data-icon","role","xmlns","viewBox","fill","d","sortCriteria","id","name","SearchForm","_ref","el","criterion","setQuery","setSortCriterion","inputEl","useRef","Fragment","onSubmit","event","preventDefault","current","value","className","styles","ref","type","placeholder","components_SearchIcon","defaultValue","onChange","e","target","map","key","RepositoryCard","setRepo","showIssues","onClick","full_name","owner","login","description","React","memo","lastPage","page","query","setLastPage","setPage","sort","_useState","useState","_useState2","slicedToArray","repos","setRepos","useEffect","fetch","concat","then","resp","link","headers","get","lastPageLink","split","substring","lastIndexOf","length","getLastPage","json","respRepo","items","disabled","components_RepositoryCard","RepoIssue","issue","body","updated_at","user","RepoIssues","issues","setIssues","issues_url","replace","issuesResp","console","log","content","created_at","pushed_at","license","language","components_RepoIssue","App","_useState3","_useState4","sortCriterion","_useState5","_useState6","_useState7","Number","MAX_SAFE_INTEGER","_useState8","_useState9","_useState10","setShowIssues","_useState11","_useState12","components_SearchForm","components_RepositoriesList","components_RepoIssues","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a2c97a99.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchForm\":\"SearchForm_searchForm__2B1MF\",\"searchInputContainer\":\"SearchForm_searchInputContainer__3fDtb\",\"searchInput\":\"SearchForm_searchInput__3ACCI\",\"searchIcon\":\"SearchForm_searchIcon__30ZEJ\",\"searchCriteria\":\"SearchForm_searchCriteria__27TBm\",\"searchButton\":\"SearchForm_searchButton__1UIiZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"RepoIssues_dialog__3LqPB\",\"dialogContent\":\"RepoIssues_dialogContent__2-UGB\",\"close\":\"RepoIssues_close__Tsr5g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"repoList\":\"RepositoriesList_repoList__2rfsz\",\"repo\":\"RepositoriesList_repo__1gxJs\",\"controls\":\"RepositoriesList_controls__18BYl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1CvSw\",\"title\":\"App_title__2-NPE\"};","import React from \"react\";\n\nconst SearchIcon = (props) => (\n  <svg\n    aria-hidden=\"true\"\n    data-prefix=\"fas\"\n    data-icon=\"search\"\n    role=\"img\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 512 512\"\n    {...props}\n  >\n    <path\n      fill=\"currentColor\"\n      d=\"M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z\"\n      {...props}\n    />\n  </svg>\n);\n\nexport default SearchIcon;\n","import React, { useRef } from 'react';\nimport SearchIcon from './SearchIcon';\nimport styles from './SearchForm.module.css';\n\nconst sortCriteria = [\n    {\n        id: 'best-match',\n        name: 'Best Match',\n    },\n    {\n        id: 'stars',\n        name: 'Stars',\n    },\n    {\n        id: 'forks',\n        name: 'Forks',\n    },\n    {\n        id: 'help-wanted-issues',\n        name: 'Help Wanted Issues',\n    },\n    {\n        id: 'updated',\n        name: 'Last edition',\n    },\n];\n\nconst SearchForm = ({\n    criterion,\n    setQuery,\n    setSortCriterion,\n}) => {\n    const inputEl = useRef({});\n\n    const setRepoToSearch = el => event => {\n        event.preventDefault();\n        setQuery(el.current.value);\n    };\n\n    return (\n        <React.Fragment>\n            <form onSubmit={setRepoToSearch(inputEl)} className={styles.searchForm}>\n                <div className={styles.searchInputContainer}>\n                    <input\n                        ref={inputEl}\n                        type=\"search\"\n                        className={styles.searchInput}\n                        placeholder=\"Search a repo ...\"\n                    />\n                    <SearchIcon className={styles.searchIcon} />\n                </div>\n                <select\n                    defaultValue={criterion}\n                    onChange={(e) => setSortCriterion(e.target.value)}\n                    className={styles.searchCriteria}\n                >\n                    {sortCriteria.map(criterion => (\n                        <option\n                            key={criterion.id}\n                            value={criterion.id}\n                        >\n                            {criterion.name}\n                        </option>\n                    ))}\n                </select>\n                <button type=\"submit\" className={styles.searchButton}>Search</button>\n            </form>\n        </React.Fragment>\n    );\n};\n\nexport default SearchForm;","import React from 'react';\n\n\nconst RepositoryCard = ({ repo, setRepo, showIssues }) => (\n    <div onClick={(e) => {\n        e.preventDefault();\n        setRepo(repo);\n        showIssues(true);\n    }}>\n        <p>\n            <strong>{repo.full_name}</strong> by \n            <strong> {repo.owner.login}</strong>\n        </p>\n        <p>{repo.description}</p>\n    </div>\n);\n\nexport default RepositoryCard;","import React, { useState, useEffect } from 'react';\nimport RepositoryCard from './RepositoryCard';\nimport styles from './RepositoriesList.module.css';\n\nconst API_ENDPOINT = 'https://api.github.com/search/repositories?q=';\n\nconst getLastPage = link => {\n    const links = link.split(',');\n    const lastPageLink = links[1].split(';')[0];\n    return lastPageLink.substring(\n        lastPageLink.lastIndexOf('=') + 1,\n        lastPageLink.length - 1\n    );\n};\n\nconst RepositoriesList = ({\n    lastPage,\n    page,\n    query,\n    setLastPage,\n    setPage,\n    setRepo,\n    showIssues,\n    sort,\n}) => {\n    const [ repos, setRepos ] = useState([]);\n\n    useEffect(\n        () => {\n            if (query) {\n                fetch(`${API_ENDPOINT}${query}&sort=${sort}&page=${page}`)\n                    .then(resp => {\n                        const link = resp.headers.get('Link');\n                        setLastPage(getLastPage(link));\n                        return resp.json();\n                    })\n                    .then(respRepo => setRepos(respRepo.items));\n            }\n        },\n        [query, sort, page]\n    );\n\n    return (\n        <React.Fragment>\n            {repos && repos.length > 1 && (\n                <div className={styles.controls}>\n                    <button disabled={page <= 1} onClick={() => setPage(--page)}>Prev</button>\n                    <button disabled={page >= lastPage} onClick={() => setPage(++page)}>Next</button>\n                </div>\n            )}\n            <ul className={styles.repoList}>\n                {(repos || []).map(repo => (\n                    <li key={repo.id} className={styles.repo}>\n                        <RepositoryCard repo={repo} setRepo={setRepo} showIssues={showIssues}  />\n                    </li>\n                ))}\n            </ul>\n        </React.Fragment>\n    );\n};\n\nexport default React.memo(RepositoriesList);","import React from 'react';\n\nconst RepoIssue = ({ issue }) => (\n    <li>\n        <strong>{issue.title}</strong><br />\n        <p>{issue.body}</p>\n        <p>\n            <strong>Last edition:</strong> {issue.updated_at} by \n            <strong> {issue.user.login}</strong>\n        </p>\n    </li>\n);\n\nexport default RepoIssue;","import React, { useEffect, useState } from 'react';\nimport RepoIssue from './RepoIssue';\nimport styles from './RepoIssues.module.css';\n\nconst RepoIssues = ({ repo, showIssues }) => {\n    const [ issues, setIssues ] = useState([]);\n    \n    useEffect(\n        () => {\n            if (repo && repo.issues_url) {\n                fetch(repo.issues_url.replace('{/number}', '?sort=updated'))\n                    .then(resp => resp.json())\n                    .then(issuesResp => console.log(issuesResp) || setIssues(issuesResp));\n            }\n        },\n        [ repo ],\n    );\n\n    return (\n        <div className={styles.dialog}>\n            <div className={styles.dialogContent}>\n                <span className={styles.close} onClick={() => showIssues(false)}>x</span>\n                <div className={styles.content}>\n                    <h1>{repo.full_name}</h1>\n                    <h2>{repo.owner.login}</h2>\n                    <p>{repo.description}</p>\n                    <p><strong>Created @ </strong> {repo.created_at}</p>\n                    <p><strong>Last commit @ </strong> {repo.pushed_at}</p>\n                    {repo.license && (\n                        <p><strong>License: </strong>{repo.license.name}</p>\n                    )}\n                    {repo.language && (\n                        <p>{repo.language}</p>\n                    )}\n                    {issues.map(issue => (\n                        <RepoIssue key={issue.id} issue={issue} />\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default RepoIssues;","import React, { useState } from 'react';\nimport SearchForm from './components/SearchForm';\nimport RepositoriesList from './components/RepositoriesList';\nimport RepoIssues from './components/RepoIssues';\n// import logo from './logo.svg';\nimport styles from './App.module.css';\n\nconst App = () => {\n  const [ query, setQuery ] = useState('');\n  const [ sortCriterion, setSortCriterion ] = useState('best-match');\n  const [ page, setPage ] = useState(1);\n  const [ lastPage, setLastPage ] = useState(Number.MAX_SAFE_INTEGER);\n  const [ showIssues, setShowIssues ] = useState(false);\n  const [ repo, setRepo ] = useState(null);\n  \n  return (\n    <div className={styles.container}>\n      <h1 className={styles.title}>RepoSearch</h1>\n      <SearchForm\n        criterion={sortCriterion}\n        setQuery={setQuery}\n        setSortCriterion={setSortCriterion}\n      />\n      <RepositoriesList\n        query={query}\n        sort={sortCriterion}\n        lastPage={lastPage}\n        page={page}\n        showIssues={setShowIssues}\n        setLastPage={setLastPage}\n        setPage={setPage}\n        setRepo={setRepo}\n      />\n      {showIssues && (\n        <RepoIssues repo={repo} showIssues={setShowIssues} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}